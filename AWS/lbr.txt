--------------------------------------------------------------------------------------------------------
Load Balancing in EC2
--------------------------------------------------------------------------------------------------------

-> Load Balancing is the process of distributing application load to multiple servers

-> Instead of deploying our application in one server, we will deploy in multiple servers

-> All the servers will be connected to Load Balancer

-> LBR will distribute traffic to servers using Round Robin algorithm


Process to Setup Load Balancer
+++++++++++++++++++++++++++++++++


1) Create Security Group with below Protocols in Inbound Rules

		SSH - 22
		HTTP - 80

	SGName : ashokit_Security_group


2) Create first EC2 instance (EC2-1) and Host Web Application

Note: Configure below script as 'User Data' at the time of launching the instance

#! /bin/bash

sudo su
yum install httpd -y
cd /var/www/html
echo "<html><h1>Life Insurance Server - 1</h1></html>" > index.html
service httpd start

3) Create second EC2 instance (EC2-2) and host web application

Note: Configure below script as 'User Data' at the time of launching the instance

#! /bin/bash
sudo su
yum install httpd -y
cd /var/www/html
echo "<html><h1>Life Insurance Server - 2</h1></html>" > index.html
service httpd start

4) Create Load Balancer ( ALB ) and attach both EC2 instances as one target group

		Scheme : Internet facing

		Select : New Target Group (Add both EC2 instances)

		Listner : HTTP : 80

		Security Group : ashokit_Security_Group

Note: Once Load Balancer created, DNS will be generated (it will take upto 3 mins)


5) Send a request to Load Balancer DNS URL and see the response 

 (it should distribute traffic to both servers)


Note
++++++++++
1) DELETE Load balancer
2) Delete EC2 instances

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Types of Load Balancers in AWS
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


-> We have 4 types of Load balancers in AWS

1) Application Load Balancer

2) Network Load Balancer

3) Gateway Load Balancer

4) Classic Load Balancer (Will be retiering on Aug 15, 2022)


-> When you want to deal with HTTP and HTTPS requests then Application Load Balancer is recommended. Application Load Balancer supports path based routing.

-> When you have static ip address and wants to process millions of requests per second then go for Network Load Balancer (This gives ultra performance)

-> When your application dealing with third party services then go for Gateway Load Balancer

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-> In realtime, project will be developed in 2 ways

1) Monolith Architecture based project

2) Microservices Architecture based project


-> Monolith Architecture means all the fuctionalities will be developed in single project
-> If we change some functionality code then it may effect on another fucntionality code
-> The maintenence will become very difficult when we follow monolith architecture

-> To overcome the problems of Monolith Architecture, now a days people are using Microservices Architecture in the Realtime.

-> In Microservices architecture, project functionality will be divided into multiple services
-> Every service is a seperate project
-> When we change functionality of one service it will not effect on another service
-> Every service will be running as a seperate project in seperate server
-> Easy to maintain


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-> Create Security Group with SSH-22 and HTTP-80 Protocols

1) Create EC2 Instance-1 For Flights (Server-1) 

#! /bin/bash
sudo su
yum install httpd -y
cd /var/www/html
echo "<html><h1>Flights Server - 1</h1></html>" > index.html
service httpd start

2) Create EC2 Instance-2 for Flights  (Server-2)

#! /bin/bash
sudo su
yum install httpd -y
cd /var/www/html
echo "<html><h1>Flights Server - 2</h1></html>" > index.html
service httpd start


-> Create "Flights Target Group" with Flights EC2 instances
 
3) Create EC2 instance-1 for Trains (Server-3)

#! /bin/bash
sudo su
yum install httpd -y
cd /var/www/html
echo "<html><h1>Trains Server - 1</h1></html>" > index.html
service httpd start


4) Create EC2 Instance-2 for Trains (Server-4)

#! /bin/bash
sudo su
yum install httpd -y
cd /var/www/html
echo "<html><h1>Trains Server - 2</h1></html>" > index.html
service httpd start


-> Create "Trains Target Group" for Trains EC2 instances



-> Create Application Load Balancer 

-> Configure Routing in Application Balancer to route the request to "Target Group" based on URL

	(At the time of LBR creation choose existing target group as Flights-TargetGroup)

-> AFter Load Balacner Created We need to configure Routing

	(Go to LBR -> Listeners -> Click on View/Edit Rules -> Click on + Symbol -> CLick on Insert Rule -> Add the rule)


Note: In this scenario i have added query string rule

	Rule-1 ==>	Key : ticket, value = flight ==> Forward it to "Flight-TargetGroup"

	Rule-2 ==> Key : ticket, value = train ==> Forward it to "Train-TargetGroup"


Default ALB URL : http://makemytripalb-1456632845.ap-south-1.elb.amazonaws.com/


URLS with Query String
+++++++++++++++++++++++
URL-1 : http://makemytripalb-1456632845.ap-south-1.elb.amazonaws.com?ticket=train

URL-2 : http://makemytripalb-1456632845.ap-south-1.elb.amazonaws.com?ticket=flight



Note
+++++
-> After practise Delete Target Groups, LBR and EC2 instances to avoid billing















